apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig
metadata:
  name: eks-demo
  version: "1.29"
  region: us-west-2
#  tags:
#    karpenter.sh/discovery: eks-demo

#karpenter:
#  version: 'v0.32.7'
#  createServiceAccount: true # default is false
#  withSpotInterruptionQueue: true # adds all required policies and rules for supporting Spot Interruption Queue, default is false

# Noodzakelijk voor o.a. IPv6, zie README/IPv6
# Voor het juiste aantal zones, zie README/VPC overwegingen
vpc:
  id: "vpc-0b7384f37844f8fcc"
  subnets:
    private:
      us-west-2a:
        id: "subnet-043c77679e9ad65f9"
      us-west-2b:
        id: "subnet-091f41b77c5141eb7"
#      us-west-2c:
#        id: "subnet-0abc79efc5a972b86"
    public:
      us-west-2a:
        id: "subnet-0fc025155115d3ca9"
      us-west-2b:
        id: "subnet-0f1f930cfb2b3909d"
#      us-west-2c:
#        id: "subnet-08991736d58ec2e49"

addons:
  - name: aws-ebs-csi-driver
    wellKnownPolicies:
      ebsCSIController : true

iam:
  # Er wordt een OIDC aangemaakt. AWS is de resource, het cluster is de resource owner.
  withOIDC: true
  serviceAccounts:
    # Alternatieve methoden om een policy te beschrijven,
    # zie https://medium.com/@marcenschede/eks-complete-with-eksctl-sprint-2-6ec2ab518e76
    - metadata:
        name: aws-load-balancer-controller
        namespace: kube-system
      wellKnownPolicies:
        awsLoadBalancerController: true
    - metadata:
        name: bitnami-external-dns-controller
        namespace: bitnami-external-dns
      wellKnownPolicies:
        externalDNS: true
    - metadata:
        name: cluster-autoscaler
        namespace: kube-system
      # inline policy can be defined along with `attachPolicyARNs`
      attachPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "autoscaling:DescribeAutoScalingGroups"
              - "autoscaling:DescribeAutoScalingInstances"
              - "autoscaling:DescribeLaunchConfigurations"
              - "autoscaling:DescribeScalingActivities"
              - "autoscaling:DescribeTags"
              - "ec2:DescribeInstanceTypes"
              - "ec2:DescribeLaunchTemplateVersions"
            Resource: '*'
          - Effect: Allow
            Action:
              - "autoscaling:SetDesiredCapacity"
              - "autoscaling:TerminateInstanceInAutoScalingGroup"
              - "ec2:DescribeImages"
              - "ec2:DescribeInstanceTypes"
              - "eks:DescribeNodegroup"
            Resource: '*'
      # refering to a policy defined in IAM
#      attachPolicyARNs:
#        - "arn:aws:iam::228991124303:policy/EKSClusterAutoscalerPolicy"

managedNodeGroups:
  - name: prod
    instanceType: t3.medium
    # Voor het juiste aantal zones, zie README/VPC overwegingen
    desiredCapacity: 2
    minSize: 2
    maxSize: 6
    spot: true
    iam:
      withAddonPolicies:
        cloudWatch: true
    tags:
      k8s.io/cluster-autoscaler/eks-demo: owned
      k8s.io/cluster-autoscaler/enabled: "true"

gitops:
  # All application that needs to be spinned up are in https://github.com/enschede/eks-demo-infra
  flux:
    gitProvider: github
    flags:
      owner: "enschede"
      repository: "eks-demo-infra"
      private: "true"
      branch: "main"
      namespace: "flux-system"
      path: "app-cluster"
